// App.js
import React, { useState, useEffect } from 'react';

// Main App Component
const App = () => {
  const [todos, setTodos] = useState([]);
  const [newTodoText, setNewTodoText] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const backendUrl = 'http://localhost:5000/api/todos'; // Ensure this matches your backend URL

  // Fetch todos from the backend
  const fetchTodos = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(backendUrl);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setTodos(data);
    } catch (err) {
      console.error("Failed to fetch todos:", err);
      setError('Failed to load todos. Please check your network and backend server.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTodos();
  }, []);

  // Add a new todo
  const addTodo = async () => {
    if (newTodoText.trim() === '') {
      setError('Todo text cannot be empty.');
      return;
    }
    setError(null);
    try {
      const response = await fetch(backendUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text: newTodoText }),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const newTodo = await response.json();
      setTodos([...todos, newTodo]);
      setNewTodoText('');
    } catch (err) {
      console.error("Failed to add todo:", err);
      setError('Failed to add todo. Please try again.');
    }
  };

  // Toggle todo completion status
  const toggleTodo = async (id, currentCompletedStatus) => {
    setError(null);
    try {
      const response = await fetch(`${backendUrl}/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ completed: !currentCompletedStatus }),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const updatedTodo = await response.json();
      setTodos(todos.map(todo => (todo._id === id ? updatedTodo : todo)));
    } catch (err) {
      console.error("Failed to update todo:", err);
      setError('Failed to update todo status. Please try again.');
    }
  };

  // Delete a todo
  const deleteTodo = async (id) => {
    setError(null);
    try {
      const response = await fetch(`${backendUrl}/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      setTodos(todos.filter(todo => todo._id !== id));
    } catch (err) {
      console.error("Failed to delete todo:", err);
      setError('Failed to delete todo. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 font-inter">
      <div className="bg-white rounded-xl shadow-lg p-6 md:p-8 w-full max-w-md">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">My Todo List</h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4" role="alert">
            {error}
          </div>
        )}

        <div className="flex mb-6">
          <input
            type="text"
            className="flex-grow border border-gray-300 rounded-l-lg p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            placeholder="Add a new todo..."
            value={newTodoText}
            onChange={(e) => setNewTodoText(e.target.value)}
            onKeyPress={(e) => { if (e.key === 'Enter') addTodo(); }}
          />
          <button
            onClick={addTodo}
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-6 rounded-r-lg transition duration-200 ease-in-out transform hover:scale-105 shadow-md"
          >
            Add
          </button>
        </div>

        {loading ? (
          <p className="text-center text-gray-600">Loading todos...</p>
        ) : (
          <ul className="space-y-3">
            {todos.length === 0 && !error && <p className="text-center text-gray-500">No todos yet! Add one above.</p>}
            {todos.map((todo) => (
              <li
                key={todo._id}
                className="flex items-center bg-gray-50 p-3 rounded-lg shadow-sm transition duration-200 ease-in-out hover:bg-gray-100"
              >
                <input
                  type="checkbox"
                  className="form-checkbox h-5 w-5 text-indigo-600 rounded mr-3 cursor-pointer"
                  checked={todo.completed}
                  onChange={() => toggleTodo(todo._id, todo.completed)}
                />
                <span
                  className={`flex-grow text-gray-800 text-lg ${todo.completed ? 'line-through text-gray-500' : ''}`}
                  onClick={() => toggleTodo(todo._id, todo.completed)} // Allow clicking text to toggle
                  style={{ cursor: 'pointer' }}
                >
                  {todo.text}
                </span>
                <button
                  onClick={() => deleteTodo(todo._id)}
                  className="ml-4 p-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition duration-200 ease-in-out transform hover:scale-105"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default App;
