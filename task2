<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Auth System</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom Inter font (optional, Tailwind usually handles sans-serif) */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Light gray background */
        }
        /* Basic styling for the container */
        .container {
            max-width: 420px; /* Slightly wider for better form spacing */
            margin: 50px auto;
            padding: 2.5rem; /* Increased padding */
            background-color: #ffffff;
            border-radius: 1rem; /* More rounded */
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); /* Softer, larger shadow */
        }
        .form-input {
            width: 100%;
            padding: 0.75rem 1rem; /* More padding */
            margin-bottom: 1.25rem; /* More margin */
            border: 1px solid #d1d5db; /* Lighter border */
            border-radius: 0.5rem; /* Rounded */
            outline: none; /* Remove default outline */
            transition: border-color 0.2s; /* Smooth transition */
        }
        .form-input:focus {
            border-color: #6366f1; /* Indigo focus color */
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2); /* Soft focus ring */
        }
        .btn {
            width: 100%;
            padding: 0.8rem 1.2rem; /* Generous padding */
            border-radius: 0.75rem; /* Very rounded */
            font-weight: 600; /* Semi-bold */
            transition: background-color 0.2s, transform 0.1s; /* Smooth transitions */
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Button shadow */
        }
        .btn-primary {
            background-color: #6366f1; /* Indigo */
            color: #ffffff;
        }
        .btn-primary:hover {
            background-color: #4f46e5; /* Darker indigo on hover */
            transform: translateY(-1px); /* Slight lift */
        }
        .btn-primary:active {
            transform: translateY(0); /* Press effect */
        }
        .btn-secondary {
            background-color: #e5e7eb; /* Light gray */
            color: #4b5563; /* Darker text */
        }
        .btn-secondary:hover {
            background-color: #d1d5db; /* Darker gray on hover */
            transform: translateY(-1px);
        }
        .message-box {
            padding: 0.8rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            text-align: center;
            font-weight: 500;
        }
        .message-success {
            background-color: #d1fae5; /* Light green */
            color: #065f46; /* Dark green text */
        }
        .message-error {
            background-color: #fee2e2; /* Light red */
            color: #991b1b; /* Dark red text */
        }
        .tab-button {
            flex: 1;
            padding: 0.75rem;
            text-align: center;
            font-weight: 600;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: border-color 0.2s, color 0.2s;
        }
        .tab-button.active {
            border-color: #6366f1;
            color: #6366f1;
        }
        .tab-button:not(.active):hover {
            color: #4f46e5;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen">
    <div class="container mx-auto">
        <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">Authentication System</h1>

        <!-- Tab Navigation -->
        <div class="flex mb-6 border-b border-gray-200">
            <button id="loginTab" class="tab-button active">Login</button>
            <button id="registerTab" class="tab-button">Register</button>
        </div>

        <!-- Message Display Area -->
        <div id="messageBox" class="message-box hidden"></div>

        <!-- Login Section -->
        <div id="loginSection">
            <h2 class="text-2xl font-semibold text-center mb-6 text-gray-700">Login</h2>
            <input type="email" id="loginEmail" placeholder="Email" class="form-input" autocomplete="email">
            <input type="password" id="loginPassword" placeholder="Password" class="form-input" autocomplete="current-password">
            <button id="loginBtn" class="btn btn-primary mb-4">Login</button>
            <p class="text-center text-sm text-gray-600">Don't have an account? <span class="text-indigo-600 cursor-pointer font-medium" onclick="showSection('register')">Register here</span></p>
        </div>

        <!-- Register Section -->
        <div id="registerSection" class="hidden">
            <h2 class="text-2xl font-semibold text-center mb-6 text-gray-700">Register</h2>
            <input type="email" id="registerEmail" placeholder="Email" class="form-input" autocomplete="email">
            <input type="password" id="registerPassword" placeholder="Password" class="form-input" autocomplete="new-password">
            <button id="registerBtn" class="btn btn-primary mb-4">Register</button>
            <p class="text-center text-sm text-gray-600">Already have an account? <span class="text-indigo-600 cursor-pointer font-medium" onclick="showSection('login')">Login here</span></p>
        </div>

        <!-- Secured Page Section -->
        <div id="securedPage" class="hidden text-center">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Welcome to the Secured Page!</h2>
            <p class="text-lg text-gray-600 mb-6">Hello, <span id="loggedInUserEmail" class="font-bold text-indigo-600"></span>!</p>
            <p class="text-md text-gray-700 mb-8">This content is only visible to authenticated users.</p>
            <button id="logoutBtn" class="btn btn-secondary">Logout</button>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const loginSection = document.getElementById('loginSection');
        const registerSection = document.getElementById('registerSection');
        const securedPage = document.getElementById('securedPage');
        const messageBox = document.getElementById('messageBox');
        const loggedInUserEmailSpan = document.getElementById('loggedInUserEmail');

        const loginEmailInput = document.getElementById('loginEmail');
        const loginPasswordInput = document.getElementById('loginPassword');
        const registerEmailInput = document.getElementById('registerEmail');
        const registerPasswordInput = document.getElementById('registerPassword');

        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        const logoutBtn = document.getElementById('logoutBtn');

        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');

        // --- Simulated Database (In a real app, this would be a server-side database) ---
        // Stores users as { email: 'base64_encoded_password' }
        let users = {};
        // Current logged-in user's email
        let loggedInUser = null;

        // --- Utility Functions ---

        /**
         * Displays a message in the message box.
         * @param {string} message - The message to display.
         * @param {'success'|'error'} type - The type of message (determines styling).
         */
        function displayMessage(message, type) {
            messageBox.textContent = message;
            messageBox.className = `message-box ${type === 'success' ? 'message-success' : 'message-error'}`;
            messageBox.classList.remove('hidden');
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 3000); // Hide after 3 seconds
        }

        /**
         * Validates an email address format.
         * @param {string} email - The email string to validate.
         * @returns {boolean} True if valid, false otherwise.
         */
        function isValidEmail(email) {
            const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }

        /**
         * Updates the UI based on the current authentication state.
         */
        function updateUI() {
            if (loggedInUser) {
                // User is logged in, show secured page
                loginSection.classList.add('hidden');
                registerSection.classList.add('hidden');
                securedPage.classList.remove('hidden');
                loggedInUserEmailSpan.textContent = loggedInUser; // Display logged-in email
            } else {
                // User is not logged in, show login/register
                securedPage.classList.add('hidden');
                // Determine which tab was active or default to login
                if (loginTab.classList.contains('active')) {
                    loginSection.classList.remove('hidden');
                    registerSection.classList.add('hidden');
                } else {
                    registerSection.classList.remove('hidden');
                    loginSection.classList.add('hidden');
                }
            }
        }

        /**
         * Switches between login and register sections.
         * @param {'login'|'register'} section - The section to show.
         */
        function showSection(section) {
            if (section === 'login') {
                loginSection.classList.remove('hidden');
                registerSection.classList.add('hidden');
                loginTab.classList.add('active');
                registerTab.classList.remove('active');
            } else {
                registerSection.classList.remove('hidden');
                loginSection.classList.add('hidden');
                registerTab.classList.add('active');
                loginTab.classList.remove('active');
            }
            messageBox.classList.add('hidden'); // Clear any previous messages
        }

        // --- Authentication Functions ---

        /**
         * Handles user registration.
         */
        function handleRegister() {
            const email = registerEmailInput.value.trim();
            const password = registerPasswordInput.value.trim();

            if (!email || !password) {
                displayMessage('Please fill in all fields.', 'error');
                return;
            }

            if (!isValidEmail(email)) {
                displayMessage('Please enter a valid email address.', 'error');
                return;
            }

            if (password.length < 6) {
                displayMessage('Password must be at least 6 characters long.', 'error');
                return;
            }

            if (users[email]) {
                displayMessage('User with this email already exists.', 'error');
                return;
            }

            // Simulate password hashing (base64 encoding for client-side demo)
            const hashedPassword = btoa(password);
            users[email] = hashedPassword;

            displayMessage('Registration successful! Please log in.', 'success');
            registerEmailInput.value = '';
            registerPasswordInput.value = '';
            showSection('login'); // Automatically switch to login after registration
            console.log('Registered users:', users); // For debugging
        }

        /**
         * Handles user login.
         */
        function handleLogin() {
            const email = loginEmailInput.value.trim();
            const password = loginPasswordInput.value.trim();

            if (!email || !password) {
                displayMessage('Please fill in all fields.', 'error');
                return;
            }

            if (!isValidEmail(email)) {
                displayMessage('Please enter a valid email address.', 'error');
                return;
            }

            const storedPassword = users[email];

            if (!storedPassword || storedPassword !== btoa(password)) {
                displayMessage('Invalid email or password.', 'error');
                return;
            }

            loggedInUser = email;
            displayMessage('Login successful!', 'success');
            loginEmailInput.value = '';
            loginPasswordInput.value = '';
            updateUI(); // Update UI to show secured page
        }

        /**
         * Handles user logout.
         */
        function handleLogout() {
            loggedInUser = null;
            displayMessage('You have been logged out.', 'success');
            updateUI(); // Update UI to show login/register
            showSection('login'); // Ensure login section is shown after logout
        }

        // --- Event Listeners ---
        loginBtn.addEventListener('click', handleLogin);
        registerBtn.addEventListener('click', handleRegister);
        logoutBtn.addEventListener('click', handleLogout);

        loginTab.addEventListener('click', () => showSection('login'));
        registerTab.addEventListener('click', () => showSection('register'));

        // Initial UI update on page load
        document.addEventListener('DOMContentLoaded', updateUI);
    </script>
</body>
</html>
